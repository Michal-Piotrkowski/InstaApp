### GET - pobierz wszystkie dane
GET http://localhost:3000/api/photosAll HTTP/1.1

### GET - pobierz jeden element wg id
GET http://localhost:3000/api/photo/1652445182755 HTTP/1.1

### POST - poniżej przykład wysłania danych typu multipart/form-data

POST http://localhost:3000/api/photos HTTP/1.1
Content-Type: multipart/form-data; boundary=----FormBoundary1234

------FormBoundary1234
Content-Disposition: form-data; name="file"; filename="input.jpg"
Content-Type: image/jpeg

< ./input.jpg

------FormBoundary1234
Content-Disposition: form-data; name="album"
Content-Type: text/plain

nazwa_albumu
------FormBoundary1234

###DELETE - usuń wg id
DELETE http://localhost:3000/api/photodel/1652446265667 HTTP/1.1

### PATCH - updatuj wg id
PATCH  http://localhost:3000/api/tasks HTTP/1.1
content-type: application/json

{
  "id": 10,
  "a": 111111,
  "b": 222222
}

// TAGS


### GET - pobierz wszystkie TAGI SUROWE BEZ KONWERSJI
GET http://localhost:3000/api/tags/raw HTTP/1.1


### GET - pobierz wszystkie TAGI Z KONWERSJA
GET http://localhost:3000/api/tags/all HTTP/1.1


### GET - pobieranie jednego taga
GET http://localhost:3000/api/tagsG/46 HTTP/1.1


### POST-PRZESŁANIE TAGA
POST http://localhost:3000/api/tagsP/nowytag HTTP/1.1


### GET - pobierz wszystkie TAGI SUROWE BEZ KONWERSJI
GET http://localhost:3000/api/tags/ADMIN HTTP/1.1

// FILTERS

### GET - zwraca dostępne metody -> info dla programisty (opcjonalnie)
GET http://localhost:3000/api/filters 

### GET - dane o zdjęciu, potrzebne do jego obróbki
GET http://localhost:3000/api/filters/metadata/1650305869815

### PATCH - użycie konkretnego filtra, dane o nim przekazujemy w jsonie
PATCH http://localhost:3000/api/filters 

### GET - tego geta trzeba przemyśleć do końca może zdjęcie pobierać pod takim adresem:
GET /uploads/nazwa_albumu/upload_a6a526ba40bc0c82f794818615184674-tint.jpg












