### GET - pobierz wszystkie dane
GET http://localhost:3000/api/photos/All HTTP/1.1

### GET - pobierz jeden element wg id
GET http://localhost:3000/api/photos/1653822498768 HTTP/1.1

### POST - poniżej przykład wysłania danych typu multipart/form-data

POST http://localhost:3000/api/photos HTTP/1.1
Content-Type: multipart/form-data; boundary=----FormBoundary1234

------FormBoundary1234
Content-Disposition: form-data; name="file"; filename="input.jpg"
Content-Type: image/jpeg

< ./input.jpg

------FormBoundary1234
Content-Disposition: form-data; name="album"
Content-Type: text/plain

nazwa_albumu
------FormBoundary1234

###DELETE - usuń wg id
DELETE http://localhost:3000/api/photos/del/1653832968932 HTTP/1.1

### PATCH - updatuj wg id
PATCH  http://localhost:3000/api/photos/tasks HTTP/1.1

{
  "id": 1653832917414,
  "status": "zmienione"
}

// TAGS


### GET - pobierz wszystkie TAGI SUROWE BEZ KONWERSJI
GET http://localhost:3000/api/tags/raw HTTP/1.1


### GET - pobierz wszystkie TAGI Z KONWERSJA
GET http://localhost:3000/api/tags/all HTTP/1.1


### GET - pobieranie jednego taga
GET http://localhost:3000/api/tagsG/3 HTTP/1.1


### POST-PRZESŁANIE TAGA
POST http://localhost:3000/api/tagsP HTTP/1.1

{   
  "name":"#nowytag3",
  "popularity": 1000000    
}

### PATCH - aktualizacja danych zdjęcia o nowy tag
PATCH http://localhost:3000/api/photos/tags HTTP/1.1

{
  "photoid":1653861738516,
  "tagid": 22
}

### PATCH - aktualizacja danych zdjęcia o nowy tag
PATCH http://localhost:3000/api/photos/tags/mass HTTP/1.1

{
  "photoid": 1653861958623,
  "array": [20,21,22]
}

### GET - pobranie tagów danego zdjęcia
GET http://localhost:3000/api/photos/tags/1653861958623 HTTP/1.1

### GET - pobierz wszystkie TAGI SUROWE BEZ KONWERSJI
GET http://localhost:3000/api/tags/ADMIN HTTP/1.1

// FILTERS

### GET - zwraca dostępne metody -> info dla programisty (opcjonalnie)
GET http://localhost:3000/api/filters 

### GET - dane o zdjęciu, potrzebne do jego obróbki
GET http://localhost:3000/api/filters/metadata/1653867731521

### PATCH - użycie konkretnego filtra, dane o nim przekazujemy w jsonie
PATCH http://localhost:3000/api/filters 

{
  "id":1654078774073,
  "filter": "tint",
  "r":19,
  "g":100,
  "b":19
}

### resize
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":1654078774073,
    "filter":"resize",
    "width": 180,
    "height": 180

}


###obrot
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":1654118809191,
    "filter":"rotate",
    "angle": 50
}


###negacja
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":0,
    "filter":"negate"
}

###reformat
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":0,
    "filter":"reformat",
    "to":"png"
}


###crop
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":0,
    "filter":"crop",
    "width": 200,
    "height": 200,
    "left": 20,
    "top": 20
}

###grayscale
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":0,
    "filter":"grayscale"

}


###flip
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":0,
    "filter":"flip"

}


###flop
PATCH http://localhost:3000/api/filters HTTP/1.1

{
    "id":0,
    "filter":"flop"

}

### pobranie przerobionego zdj o id
GET  http://localhost:3000/api/photos/uploads/album/1653861738516 HTTP/1.1

// USERS


### register usera z potwierdzeniem wysłanym na maila
POST http://localhost:3000/api/users/register HTTP/1.1

{
  "name": "Michał",
  "lastName": "Piotrkowski",
  "email": "zitrox123@gmail.com",
  "password": "Piotrkowski3"
}

### Potwierdzenie konta usera
GET http://localhost:3000/api/user/confirm/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InppdHJveDEyM0BnbWFpbC5jb20iLCJhbnlEYXRhIjoiMTIzIiwiaWF0IjoxNjU0MTM5MzIyLCJleHAiOjE2NTQxNDI5MjJ9.EDRuiahhvFSUrpiHCt7isxqvIoh1C6cEaGGWoU5AVU4








